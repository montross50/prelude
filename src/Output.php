<?php

namespace Prelude;

final class Output {

    /**
     * Captures all output generated by the given function
     *
     * This function uses an internal output buffer to redirect
     * the output generated, it will be inmediatelly cleared
     * after the closure returns the execution -or if an exception
     * is thrown- thus NO OUTPUT WILL BE GENERATED.
     *
     * It's safe to throw exceptions inside the closure.
     *
     * {@example
     *    ob_start();
     *    $captured = Ouput::capture(function() {
     *        echo 'output';
     *    });
     *    $output = ob_get_contents();
     *
     *    var_dump($captured); // string("output")
     *    var_dump($output);   // null
     * }
     *
     * @param \Closure $function
     * @return string output generated by function, or
     *                    `null` if no output where captured
     *
     * @throws \Exception if they are generated within the given closure
     */
    static function capture(\Closure $function) {
        ob_start();
        try {
            $function();
        } catch (\Exception $e) {
            ob_end_clean();
            throw $e;
        }
        return ob_get_clean();
    }

    /**
     * Captures passthru output generated by the given function
     *
     * This function uses an internal output buffer to capture
     * the output generated, which will be inmediatelly flushed.
     *
     * It's safe to throw exceptions inside the closure: in such
     * cases output buffers will be discarded.
     *
     * {@example
     *    ob_start();
     *    $captured = Ouput::capture(function() {
     *        echo 'output';
     *    });
     *    $output = ob_get_contents();
     *
     *    var_dump($captured === $output); // boolean("true")
     * }
     *
     * @param \Closure $function
     * @return string output generated by function, or
     *                    `null` if no output where captured
     *
     * @throws \Exception if they are generated within the given closure
     */
    static function passthru(\Closure $function) {
        ob_start();

        try {
            $function();
        } catch (\Exception $e) {
            ob_end_clean();
            throw $e;
        }
        return ob_get_flush();
    }

    /**
     * @param \Closure[] $functions
     * @return string
     *
     * @deprecated
     */
    static function captureAll($functions) {

        if ($functions instanceof \Closure) {
            $functions = func_get_args();
        }

        Check::argument(Iterables::isIterable($functions));

        return Output::capture(function () use ($functions) {
            foreach ($functions as $fn) {
                Check::argument($fn instanceof \Closure);
                $fn();
            }
        });
    }
}
